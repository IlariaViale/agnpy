# test the synchrotron module
import numpy as np
import astropy.units as u
from astropy.constants import m_e, m_p
from astropy.coordinates import Distance
import pytest
from pathlib import Path
from agnpy.emission_regions import Blob
from agnpy.spectra import PowerLaw, LogParabola, BrokenPowerLaw, ExpCutoffPowerLaw
from synchrotron_new import Synchrotron, nu_synch_peak
from proton_synchrotron import ProtonSynchrotron
from agnpy.utils.math import trapz_loglog
from utils_pytes import (
    make_comparison_plot,
    extract_columns_sample_file,
    check_deviation,
    clean_and_make_dir,
)

agnpy_dir = Path(__file__).parent.parent.parent  # go to the agnpy root
# where to read sampled files
data_dir = agnpy_dir / "agnpy/data"
# where to save figures, clean-up before making the new
figures_dir = clean_and_make_dir(agnpy_dir, "crosschecks/figures/proton_synchrotron")


# Define source for PKS2155
B = 80 * u.G
redshift = 0.117
distPKS = Distance(z=redshift) # Already inside blob definition
doppler_s = 30
Gamma_bulk = 16
R = 5.2e14 * u.cm #radius of the blob
vol = (4. / 3) * np.pi * R ** 3


class TestProtonSynchrotron:
    """Class grouping all tests related to the Proton Synchrotron class."""

    def test_synch_reference_sed(self):
        """Test agnpy proton synchrotron SED against the data of PKS2155-304 from Matteo Cerruti."""
        # reference SED
        pks_sed = np.loadtxt(f"{data_dir}/reference_seds/matteo_2012/PKS2155-304_data_circa.txt")
        log_nu_ref = pks_sed[:,0]
        log_sed_ref = pks_sed[:,1]
        nu_ref = 10**log_nu_ref * u.Unit('Hz')
        nu_ref_comp = 10**log_nu_ref
        sed_ref = 10**log_sed_ref *u.Unit("erg cm-2 s-1")

        # agnpy
        n_p = ExpCutoffPowerLaw(k=12e3 / u.Unit('cm3'), #12e3 / u.Unit('cm3'),
            p = 2.0 ,
            gamma_c= 1e9,
            gamma_min= 1,
            gamma_max=1e20,
            mass=m_p
        )

        blob = Blob(R_b=R,
                z=redshift,
                delta_D=doppler_s,
                Gamma=Gamma_bulk,
                B=B,
                n_p=n_p
        )

        psynch = ProtonSynchrotron(blob)
        sed_agnpy = psynch.sed_flux(nu_ref)

        # sed comparison plot
        nu_range = [1e10, 1e30] * u.Hz
        make_comparison_plot(
            nu_ref,
            sed_agnpy,
            sed_ref,
            "agnpy",
            "PKS2155-304 data",
            "Proton Synchrotron",
            f"{figures_dir}/proton_synch_comparison_PKS.png",
            "sed",
            y_range=[1e-14, 1e-8],
            comparison_range=nu_range.to_value("Hz"),
        )
        # requires that the SED points deviate less than 25% from the figure
        assert check_deviation(nu_ref, sed_agnpy, sed_ref, 0.25, nu_range)


    # def test_ssa_reference_sed(
    #     self, file_ref, n_e, figure_title, figure_path,
    # ):
    #     """Test SSA SED generated by a given electron distribution against the
    #     ones generated with jetset version 1.1.2, via jetset_ssa_sed.py script."""
    #     # reference SED
    #     nu_ref, sed_ref = extract_columns_sample_file(file_ref, "Hz", "erg cm-2 s-1")
    #
    #     # same parameters used to produce the jetset SED
    #     blob = Blob(R_b=5e15 * u.cm, z=0.1, delta_D=10, Gamma=10, B=0.1 * u.G, n_e=n_e)
    #
    #     # recompute the SED at the same ordinates where the figure was sampled
    #     synch = Synchrotron(blob, ssa=True)
    #     sed_agnpy = synch.sed_flux(nu_ref)
    #
    #     # sed comparison plot, we will check between 10^(11) and 10^(19) Hz
    #     nu_range = [1e11, 1e19] * u.Hz
    #     make_comparison_plot(
    #         nu_ref,
    #         sed_agnpy,
    #         sed_ref,
    #         "agnpy",
    #         "jetset 1.1.2",
    #         figure_title,
    #         figure_path,
    #         "sed",
    #         comparison_range=nu_range.to_value("Hz"),
    #     )
    #
    #     # requires that the SED points deviate less than 5% from the figure
    #     assert check_deviation(nu_ref, sed_agnpy, sed_ref, 0.05, nu_range)

    def test_synch_delta_sed(self):
        """Check that in a given frequency range the full synchrotron SED coincides
        with the delta function approximation."""
        n_p = ExpCutoffPowerLaw(k=12e3 / u.Unit('cm3'), #12e3 / u.Unit('cm3'),
            p = 2.0 ,
            gamma_c= 1e9,
            gamma_min= 1,
            gamma_max=1e20,
            mass=m_p
        )

        blob = Blob(R_b=R,
                z=redshift,
                delta_D=doppler_s,
                Gamma=Gamma_bulk,
                B=B,
                n_p=n_p
        )

        psynch = ProtonSynchrotron(blob)

        # sed comparison plot
        nu = [1e10, 1e30] * u.Hz

        sed_full = psynch.sed_flux(nu)
        sed_delta = psynch.sed_flux_delta_approx(nu)

        # range of comparison
        nu_range = [1e12, 1e17] * u.Hz
        make_comparison_plot(
            nu,
            sed_delta,
            sed_full,
            "delta function approximation",
            "full integration",
            "Synchrotron",
            f"{figures_dir}/proton_synch_comparison_delta_aprproximation.png",
            "sed",
            y_range=[1e-16, 1e-8],
            comparison_range=nu_range.to_value("Hz"),
        )

        # requires that the delta approximation SED points deviate less than 10%
        assert check_deviation(nu, sed_delta, sed_full, 0.1, nu_range)

    def test_sed_integration_methods(self):
        """Test different integration methods against each other:
        simple trapezoidal rule vs trapezoidal rule in log-log space.
        """
        n_p = ExpCutoffPowerLaw(k=12e3 / u.Unit('cm3'), #12e3 / u.Unit('cm3'),
            p = 2.0 ,
            gamma_c= 1e9,
            gamma_min= 1,
            gamma_max=1e20,
            mass=m_p
        )

        blob = Blob(R_b=R,
                z=redshift,
                delta_D=doppler_s,
                Gamma=Gamma_bulk,
                B=B,
                n_p=n_p
        )

        psynch = ProtonSynchrotron(blob)

        # sed comparison plot
        nu = [1e10, 1e30] * u.Hz
        synch_trapz = Synchrotron(blob, integrator=np.trapz)
        synch_trapz_loglog = Synchrotron(blob, integrator=trapz_loglog)

        nu = np.logspace(8, 23) * u.Hz
        sed_synch_trapz = synch_trapz.sed_flux(nu)
        sed_synch_trapz_loglog = synch_trapz_loglog.sed_flux(nu)

        # sed comparison plot
        nu_range = [1e8, 1e22] * u.Hz
        make_comparison_plot(
            nu,
            sed_synch_trapz_loglog,
            sed_synch_trapz,
            "trapezoidal log-log integration",
            "trapezoidal integration",
            "Proton Synchrotron",
            f"{figures_dir}/proton_synch_comparison_integration_methods.png",
            "sed",
            y_range=[1e-16, 1e-10],
            comparison_range=nu_range.to_value("Hz"),
        )

        # requires that the SED points deviate less than 10%
        assert check_deviation(
            nu, sed_synch_trapz_loglog, sed_synch_trapz, 0.01, nu_range
        )

    # def test_nu_synch_peak(self):
    #     """Test peak synchrotron frequency for a given magnetic field and Lorentz factor."""
    #     gamma = 100
    #     nu_synch = nu_synch_peak(1 * u.G, gamma).to_value("Hz")
    #     assert np.isclose(nu_synch, 27992489872.33304, atol=0)
